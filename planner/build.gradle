plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id("com.diffplug.spotless") version "7.0.2"
}

group = 'com.checkout.staffing'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	//	flyway
	runtimeOnly 'org.flywaydb:flyway-gradle-plugin:9.16.3'
	implementation 'org.flywaydb:flyway-core:9.16.3'
	implementation 'org.flywaydb:flyway-mysql:9.16.3'

	// jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
}

tasks.named('test') {
	useJUnitPlatform()
}

spotless {
	java {
		// Use the default importOrder configuration
		importOrder()
		// optional: you can specify import groups directly
		// note: you can use an empty string for all the imports you didn't specify explicitly, '|' to join group without blank line, and '\\#` prefix for static imports
//		importOrder('java|javax', 'com.acme', '', '\\#com.acme', '\\#')
		// optional: instead of specifying import groups directly you can specify a config file
		// export config file: https://github.com/diffplug/spotless/blob/main/ECLIPSE_SCREENSHOTS.md#creating-spotlessimportorder
//		importOrderFile('eclipse-import-order.txt') // import order file as exported from eclipse

		removeUnusedImports()

		// Cleanthat will refactor your code, but it may break your style: apply it before your formatter
//		cleanthat()          // has its own section below

		// Choose one of these formatters.
		googleJavaFormat()   // has its own section below
//		eclipse()            // has its own section below
//		prettier()           // has its own section below
//		clangFormat()        // has its own section below

		formatAnnotations()  // fixes formatting of type annotations, see below

		licenseHeader '/* (C) $YEAR */' // or licenseHeaderFile
	}
}